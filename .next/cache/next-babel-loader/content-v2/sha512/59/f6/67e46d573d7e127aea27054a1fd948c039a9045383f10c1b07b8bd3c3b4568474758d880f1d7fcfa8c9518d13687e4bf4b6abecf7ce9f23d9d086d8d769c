{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Fragment } from \"react\";\nimport MeetupDetails from \"../../components/meetups/MeetupDetails\";\nimport { MongoClient, ServerApiVersion, ObjectId } from \"mongodb\";\nimport Head from \"next/head\";\nconst uri = \"mongodb+srv://Admin:Azertier1@devcluster.lwvq1xo.mongodb.net/?retryWrites=true&w=majority\";\n\nconst MeetupDetailsPage = props => {\n  return /*#__PURE__*/_jsxs(Fragment, {\n    children: [/*#__PURE__*/_jsxs(Head, {\n      children: [/*#__PURE__*/_jsx(\"title\", {\n        children: props.meetup.id\n      }), /*#__PURE__*/_jsx(\"meta\", {\n        name: \"description\",\n        content: props.meetup.description\n      })]\n    }), /*#__PURE__*/_jsx(MeetupDetails, _objectSpread({}, props.meetup))]\n  });\n};\n\nexport async function getStaticPaths() {\n  // fetch data from mongoDB atlas (cloud)\n  const client = await MongoClient.connect(uri, {\n    useNewUrlParser: true,\n    useUnifiedTopology: true,\n    serverApi: ServerApiVersion.v1\n  });\n  const meetupCollection = client.db(\"meetups-app\").collection(\"meetups\");\n  const meetupsIds = await meetupCollection.find({}, {\n    _id: 1\n  }).toArray();\n  client.close();\n  return {\n    fallback: false,\n    paths: meetupsIds.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    }))\n  };\n}\nexport async function getStaticProps(context) {\n  const meetupId = context.params.meetupId; // fetch data from mongoDB atlas (cloud)\n\n  const client = await MongoClient.connect(uri, {\n    useNewUrlParser: true,\n    useUnifiedTopology: true,\n    serverApi: ServerApiVersion.v1\n  });\n  const meetupCollection = client.db(\"meetups-app\").collection(\"meetups\");\n  const selectedMeetup = await meetupCollection.findOne({\n    _id: ObjectId(meetupId)\n  });\n  client.close();\n  return {\n    props: {\n      meetup: {\n        id: selectedMeetup._id.toString(),\n        image: selectedMeetup.image,\n        address: selectedMeetup.address,\n        description: selectedMeetup.description,\n        title: selectedMeetup.title\n      }\n    } // incremental static generation\n    // revalidate: 1,\n\n  };\n}\nexport default MeetupDetailsPage;","map":null,"metadata":{},"sourceType":"module"}