{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\LENOVO\\\\Desktop\\\\test\\\\REACT JS\\\\next-project\\\\pages\\\\[meetupId]\\\\index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Fragment } from \"react\";\nimport MeetupDetails from \"../../components/meetups/MeetupDetails\";\nimport { MongoClient, ServerApiVersion, ObjectId } from \"mongodb\";\nimport Head from \"next/head\";\nconst uri = \"mongodb+srv://Admin:Azertier1@devcluster.lwvq1xo.mongodb.net/?retryWrites=true&w=majority\";\n\nconst MeetupDetailsPage = props => {\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: [/*#__PURE__*/_jsxDEV(\"title\", {\n        children: props.meetup.id\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"meta\", {\n        name: \"description\",\n        content: props.meetup.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MeetupDetails, _objectSpread({}, props.meetup), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 5\n  }, this);\n};\n\nexport async function getStaticPaths() {\n  // fetch data from mongoDB atlas (cloud)\n  const client = await MongoClient.connect(uri, {\n    useNewUrlParser: true,\n    useUnifiedTopology: true,\n    serverApi: ServerApiVersion.v1\n  });\n  const meetupCollection = client.db(\"meetups-app\").collection(\"meetups\");\n  const meetupsIds = await meetupCollection.find({}, {\n    _id: 1\n  }).toArray();\n  client.close();\n  return {\n    fallback: false,\n    paths: meetupsIds.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    }))\n  };\n}\nexport async function getStaticProps(context) {\n  const meetupId = context.params.meetupId; // fetch data from mongoDB atlas (cloud)\n\n  const client = await MongoClient.connect(uri, {\n    useNewUrlParser: true,\n    useUnifiedTopology: true,\n    serverApi: ServerApiVersion.v1\n  });\n  const meetupCollection = client.db(\"meetups-app\").collection(\"meetups\");\n  const selectedMeetup = await meetupCollection.findOne({\n    _id: ObjectId(meetupId)\n  });\n  client.close();\n  return {\n    props: {\n      meetup: {\n        id: selectedMeetup._id.toString(),\n        image: selectedMeetup.image,\n        address: selectedMeetup.address,\n        description: selectedMeetup.description,\n        title: selectedMeetup.title\n      }\n    } // incremental static generation\n    // revalidate: 1,\n\n  };\n}\nexport default MeetupDetailsPage;","map":{"version":3,"sources":["C:/Users/LENOVO/Desktop/test/REACT JS/next-project/pages/[meetupId]/index.js"],"names":["Fragment","MeetupDetails","MongoClient","ServerApiVersion","ObjectId","Head","uri","MeetupDetailsPage","props","meetup","id","description","getStaticPaths","client","connect","useNewUrlParser","useUnifiedTopology","serverApi","v1","meetupCollection","db","collection","meetupsIds","find","_id","toArray","close","fallback","paths","map","params","meetupId","toString","getStaticProps","context","selectedMeetup","findOne","image","address","title"],"mappings":"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","sourcesContent":["import { Fragment } from \"react\";\r\nimport MeetupDetails from \"../../components/meetups/MeetupDetails\";\r\nimport { MongoClient, ServerApiVersion, ObjectId } from \"mongodb\";\r\nimport Head from \"next/head\";\r\n\r\nconst uri =\r\n  \"mongodb+srv://Admin:Azertier1@devcluster.lwvq1xo.mongodb.net/?retryWrites=true&w=majority\";\r\n\r\nconst MeetupDetailsPage = (props) => {\r\n  return (\r\n    <Fragment>\r\n      <Head>\r\n        <title>{props.meetup.id}</title>\r\n        <meta name=\"description\" content={props.meetup.description} />\r\n      </Head>\r\n      <MeetupDetails {...props.meetup} />\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport async function getStaticPaths() {\r\n  // fetch data from mongoDB atlas (cloud)\r\n\r\n  const client = await MongoClient.connect(uri, {\r\n    useNewUrlParser: true,\r\n    useUnifiedTopology: true,\r\n    serverApi: ServerApiVersion.v1,\r\n  });\r\n\r\n  const meetupCollection = client.db(\"meetups-app\").collection(\"meetups\");\r\n\r\n  const meetupsIds = await meetupCollection.find({}, { _id: 1 }).toArray();\r\n\r\n  client.close();\r\n\r\n  return {\r\n    fallback: false,\r\n    paths: meetupsIds.map((meetup) => ({\r\n      params: { meetupId: meetup._id.toString() },\r\n    })),\r\n  };\r\n}\r\n\r\nexport async function getStaticProps(context) {\r\n  const meetupId = context.params.meetupId;\r\n\r\n  // fetch data from mongoDB atlas (cloud)\r\n  const client = await MongoClient.connect(uri, {\r\n    useNewUrlParser: true,\r\n    useUnifiedTopology: true,\r\n    serverApi: ServerApiVersion.v1,\r\n  });\r\n\r\n  const meetupCollection = client.db(\"meetups-app\").collection(\"meetups\");\r\n\r\n  const selectedMeetup = await meetupCollection.findOne({\r\n    _id: ObjectId(meetupId),\r\n  });\r\n\r\n  client.close();\r\n\r\n  return {\r\n    props: {\r\n      meetup: {\r\n        id: selectedMeetup._id.toString(),\r\n        image: selectedMeetup.image,\r\n        address: selectedMeetup.address,\r\n        description: selectedMeetup.description,\r\n        title: selectedMeetup.title,\r\n      },\r\n    },\r\n    // incremental static generation\r\n    // revalidate: 1,\r\n  };\r\n}\r\n\r\nexport default MeetupDetailsPage;\r\n"]},"metadata":{},"sourceType":"module"}